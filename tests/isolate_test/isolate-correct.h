
void game_print(const game_info_t* info, const game_state_t* state);
int game_can_move(const game_info_t* info, const game_state_t* state, int color, int dir);
void game_make_move(const game_info_t* info, game_state_t* state, int color, int dir);
int game_next_move_color(const game_info_t* info, const game_state_t* state);
int game_num_free_coords(const game_info_t* info, const game_state_t* state, int x, int y);
int game_num_source_coords(const game_info_t* info, const game_state_t* state, int x, int y);
int game_num_free_pos(const game_info_t* info, const game_state_t* state, pos_t pos);
int game_is_free(const game_info_t* info, const game_state_t* state, int x, int y);
int game_read(const char* filename, game_info_t* info, game_state_t* state);
void game_save_svg(const char* filename, const game_info_t* info, const game_state_t* state);
int node_compare(const tree_node_t* a, const tree_node_t* b);
tree_node_t* node_create(tree_node_t* parent, const game_info_t* info, const game_state_t* state);
void node_diagnostics(const game_info_t* info, const tree_node_t* node);
void animate_solution(const game_info_t* info, const tree_node_t* node);
size_t parse_options(int argc, char** argv, const char** input_files);
heapq_t heapq_create(size_t max_nodes);
size_t heapq_count(const heapq_t* q);
int heapq_empty(const heapq_t* q);
const tree_node_t* heapq_peek(const heapq_t* q);
void heapq_enqueue(heapq_t* q, tree_node_t* node);
tree_node_t* heapq_deque(heapq_t* q);
void heapq_destroy(heapq_t* q);
queue_t queue_create(size_t max_nodes);
int queue_empty(const queue_t* q);
size_t queue_count(const queue_t* q);
void queue_enqueue(queue_t* q, tree_node_t* n);
const tree_node_t* queue_peek(const queue_t* q);
tree_node_t* queue_deque(queue_t* q);
void queue_destroy(queue_t* q);
int game_dijkstra_search(const game_info_t* info, const game_state_t* init_state, double* elapsed_out, size_t* nodes_out, game_state_t* final_state);
int get_color_id(char c);
int terminal_has_color();
const char* color_char(const char* ansi_code, char color_out, char mono_out);
const char* unprint_board(const game_info_t* info);
int coords_valid(const game_info_t* info, int x, int y);
pos_t offset_pos(const game_info_t* info, int x, int y, int dir);
pos_t pos_offset_pos(const game_info_t* info, pos_t pos, int dir);
int get_wall_dist(const game_info_t* info, int x, int y);
int pos_get_wall_dist(const game_info_t* info, pos_t pos);
cell_t cell_create(uint8_t type, uint8_t color, uint8_t dir);
uint8_t cell_get_type(cell_t c);
uint8_t cell_get_direction(cell_t c);
uint8_t cell_get_color(cell_t c);
const char* color_name_str(const game_info_t* info, int color);
const char* color_cell_str(const game_info_t* info,cell_t cell);
int cmp(int a, int b);
double now();
void delay_seconds(double s) ;
pos_t pos_from_coords(pos_t x, pos_t y);
void pos_get_coords(pos_t p, int* x, int* y);
